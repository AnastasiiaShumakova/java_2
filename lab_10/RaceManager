package Lab_2_3;

import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class RaceManager {
    private final int numRunners;
    private final CyclicBarrier startBarrier;
    private final CyclicBarrier finishBarrier;

    public RaceManager(int numRunners) {
        this.numRunners = numRunners;
        this.startBarrier = new CyclicBarrier(numRunners);
        this.finishBarrier = new CyclicBarrier(numRunners, () -> {
            System.out.println("Гонка завершена!");
        });
    }

    public void startRace() {
        ExecutorService executor = Executors.newFixedThreadPool(numRunners);
        for (int i = 0; i < numRunners; i++) {
            String runnerName = "Бегун " + (i + 1);
            executor.submit(new Runner(runnerName, startBarrier, finishBarrier));
        }

        executor.shutdown();
        try {
            executor.awaitTermination(10, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            System.out.println("Ошибка ожидания завершения потоков: " + e.getMessage());
        }
    }
}
