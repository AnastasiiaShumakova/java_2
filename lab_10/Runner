package Lab_2_3;

import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.ThreadLocalRandom;

public class Runner implements Runnable {
    private final String name;
    private final CyclicBarrier startBarrier;
    private final CyclicBarrier finishBarrier;

    public Runner(String name, CyclicBarrier startBarrier, CyclicBarrier finishBarrier) {
        this.name = name;
        this.startBarrier = startBarrier;
        this.finishBarrier = finishBarrier;
    }

    @Override
    public void run() {
        try {
            System.out.println(name + " готовится к старту...");
            startBarrier.await(); // Ожидание старта
            System.out.println(name + " стартовал!");

            // Симуляция бега
            int randomTime = ThreadLocalRandom.current().nextInt(500, 3000);
            Thread.sleep(randomTime);

            System.out.println(name + " финишировал!");
            finishBarrier.await(); // Ожидание финиша всех участников
        } catch (InterruptedException | BrokenBarrierException e) {
            Thread.currentThread().interrupt();
            System.out.println("Ошибка во время гонки: " + e.getMessage());
        }
    }
}
